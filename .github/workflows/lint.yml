name: Lint

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  kotlin-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.2'
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Run Detekt
      run: ./gradlew detekt --continue
      
    - name: Run KtLint
      run: ./gradlew ktlintCheck --continue
      
    - name: Upload Detekt reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: detekt-reports
        path: |
          **/build/reports/detekt/
        retention-days: 30
        
    - name: Upload KtLint reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ktlint-reports
        path: |
          **/build/reports/ktlint/
        retention-days: 30
        
    - name: Annotate PR with Detekt findings
      if: github.event_name == 'pull_request'
      uses: lcollins/detekt-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        detekt_config_file: config/detekt/detekt.yml

  android-lint:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        flavor: ["free", "pro"]
        
    name: Android Lint (${{ matrix.flavor }})
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.2'
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Run Android Lint for ${{ matrix.flavor }}
      run: ./gradlew lint${{ matrix.flavor }}Debug lint${{ matrix.flavor }}Release --continue
      
    - name: Upload Android Lint reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: android-lint-reports-${{ matrix.flavor }}
        path: |
          **/build/reports/lint-results-*.html
          **/build/reports/lint-results-*.xml
        retention-days: 30

  dependency-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.2'
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Run dependency analysis
      run: |
        # Check for unused dependencies
        ./gradlew buildHealth --continue || true
        
        # Check for dependency vulnerabilities using OWASP
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.3/dependency-check-8.4.3-release.zip
        unzip dependency-check-8.4.3-release.zip
        
        # Build to generate dependency files
        ./gradlew assembleProDebug
        
        # Run OWASP dependency check
        ./dependency-check/bin/dependency-check.sh \
          --project "MyDashboardApp" \
          --scan "./app/build/intermediates/dependencies_cache" \
          --scan "./*/build/intermediates/dependencies_cache" \
          --format JSON --format HTML \
          --out ./dependency-check-reports/ \
          --failOnCVSS 7 \
          --suppression config/dependency-check-suppressions.xml || true
        
    - name: Upload dependency analysis reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-analysis-reports
        path: |
          **/build/reports/dependency-analysis/
          dependency-check-reports/

  security-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.2'
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Set up Python for security tools
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep truffleHog3
        
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        
    - name: Run TruffleHog secret scan
      run: |
        truffleHog3 --no-history --format json --output trufflehog-report.json . || true
        
    - name: Build release APK for security analysis
      run: ./gradlew assembleProRelease
      
    - name: Check for hardcoded secrets in APK
      run: |
        # Extract APK to check for hardcoded values
        if [ -f "app/build/outputs/apk/pro/release/*.apk" ]; then
          mkdir -p apk-analysis
          unzip -q app/build/outputs/apk/pro/release/*.apk -d apk-analysis/
          
          # Search for potential hardcoded secrets in dex files
          find apk-analysis/ -name "*.dex" -exec strings {} \; | \
            grep -E "(api[_-]?key|password|secret|token)" -i > potential_secrets.txt || true
          
          if [ -s potential_secrets.txt ]; then
            echo "⚠️ Potential hardcoded secrets found in APK:"
            head -10 potential_secrets.txt
          else
            echo "✅ No obvious hardcoded secrets found in APK"
          fi
        fi
        
    - name: Verify ProGuard obfuscation
      run: |
        if [ -f "app/build/outputs/mapping/proRelease/mapping.txt" ]; then
          echo "✅ ProGuard obfuscation verified - mapping file found"
          MAPPING_LINES=$(wc -l < app/build/outputs/mapping/proRelease/mapping.txt)
          echo "Mapping file contains $MAPPING_LINES lines"
          
          if [ $MAPPING_LINES -lt 100 ]; then
            echo "⚠️ Warning: Mapping file seems small. Obfuscation might not be working properly."
          fi
        else
          echo "❌ ProGuard mapping file not found - obfuscation may not be working"
          exit 1
        fi
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-lint-reports
        path: |
          semgrep-report.json
          trufflehog-report.json
          potential_secrets.txt
          app/build/outputs/mapping/proRelease/mapping.txt
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.2'
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Run code quality checks
      run: |
        # Run various code quality checks
        echo "Running code complexity analysis..."
        
        # Check Kotlin code complexity
        find . -name "*.kt" -not -path "./build/*" | xargs wc -l > complexity_report.txt
        
        echo "Checking for TODO/FIXME comments..."
        find . -name "*.kt" -not -path "./build/*" | \
          xargs grep -n "TODO\|FIXME\|XXX\|HACK" > todos.txt || true
          
        echo "Analyzing method lengths..."
        find . -name "*.kt" -not -path "./build/*" -exec grep -c "fun " {} \; | \
          awk '{sum+=$1} END {print "Total functions: " sum}' > function_count.txt
        
    - name: Generate code metrics
      run: |
        echo "## Code Quality Metrics" > code_quality_report.md
        echo "" >> code_quality_report.md
        
        if [ -s complexity_report.txt ]; then
          TOTAL_LINES=$(awk '{sum+=$1} END {print sum}' complexity_report.txt)
          FILE_COUNT=$(wc -l < complexity_report.txt)
          AVG_LINES=$((TOTAL_LINES / FILE_COUNT))
          
          echo "### Code Statistics" >> code_quality_report.md
          echo "- **Total Lines of Kotlin Code:** $TOTAL_LINES" >> code_quality_report.md
          echo "- **Number of Kotlin Files:** $FILE_COUNT" >> code_quality_report.md
          echo "- **Average Lines per File:** $AVG_LINES" >> code_quality_report.md
          echo "" >> code_quality_report.md
        fi
        
        if [ -s todos.txt ]; then
          TODO_COUNT=$(wc -l < todos.txt)
          echo "### Technical Debt" >> code_quality_report.md
          echo "- **TODO/FIXME Comments:** $TODO_COUNT" >> code_quality_report.md
          echo "" >> code_quality_report.md
        fi
        
        if [ -s function_count.txt ]; then
          cat function_count.txt >> code_quality_report.md
          echo "" >> code_quality_report.md
        fi
        
    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          complexity_report.txt
          todos.txt
          function_count.txt
          code_quality_report.md
        retention-days: 30

  lint-summary:
    runs-on: ubuntu-latest
    needs: [kotlin-lint, android-lint, dependency-analysis, security-lint, code-quality]
    if: always()
    
    steps:
    - name: Lint Summary
      run: |
        echo "## Lint & Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Static Analysis Results" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.kotlin-lint.result }}" = "success" ]; then
          echo "✅ Kotlin lint (Detekt & KtLint) passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Kotlin lint failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.android-lint.result }}" = "success" ]; then
          echo "✅ Android lint passed for all flavors" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Android lint failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Security & Dependencies" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.dependency-analysis.result }}" = "success" ]; then
          echo "✅ Dependency analysis passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Dependency analysis had issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-lint.result }}" = "success" ]; then
          echo "✅ Security lint passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security lint had issues" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Code Quality" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.code-quality.result }}" = "success" ]; then
          echo "✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Code quality checks had issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Lint execution completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
